<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Live Bus Tracking</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      text-align: center;
    }
    .container {
      padding: 60px;
    }
    #map {
      height: 500px;
      width: 100%;
      margin: 20px auto;
    }
    .eta-container {
      margin-top: 10px;
      font-size: 16px;
    }
    .eta-info {
      padding: 10px;
      background-color: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 5px;
      margin-top: 5px;
    }
    .bus-label {
      background-color: red;
      color: white;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      font-weight: bold;
      font-size: 14px;
      border: 2px solid #fff;
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Live Bus Tracking</h1>
    <div id="map"></div>
    <div id="eta" class="eta-container"></div>
  </div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Initialize the map
    const map = L.map('map').setView([20.5937, 78.9629], 5); 

    // OpenStreetMap tiles
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: 'Â© OpenStreetMap contributors'
    }).addTo(map);

    const markers = {};

    // Socket.io connection
    const socket = io();

    function createBusLabel(busNo) {
      return L.divIcon({
        html: `<div class="bus-label">${busNo}</div>`,
        iconSize: [40, 40],
        className: ''
      });
    }

 //estimated arrival time
    function calculateETA(bus, driverLat, driverLon, studentLat, studentLon) {
      const osrmUrl = `https://router.project-osrm.org/route/v1/driving/${driverLon},${driverLat};${studentLon},${studentLat}?overview=false`;

      fetch(osrmUrl)
        .then((response) => response.json())
        .then((data) => {
          const etaContainer = document.getElementById('eta');
          if (data && data.routes && data.routes.length > 0) {
            const duration = data.routes[0].duration; 
            const minutes = Math.ceil(duration / 60);
            etaContainer.innerHTML = `<div class="eta-info"><strong>Bus ${bus}</strong>: Estimated arrival time is ${minutes} minutes.</div>`;
          } else {
            etaContainer.innerHTML = `<div class="eta-info"><strong>Bus ${bus}</strong>: Unable to calculate ETA.</div>`;
          }
        })
        .catch((error) => {
          console.error('Error fetching route:', error);
        });
    }

    //user's location
    function getUserLocation() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition((position) => {
          const studentLocation = [position.coords.latitude, position.coords.longitude];

          //student location
          const studentMarker = L.marker(studentLocation, { title: "Your Location" })
            .addTo(map)
            .bindPopup("You are here.")
            .openPopup();

          map.setView(studentLocation, 15);
          
          // bus location updates
          socket.on('updateMap', (busLocations) => {
            Object.keys(busLocations).forEach((bus) => {
              const { lat, lon } = busLocations[bus];

              // Update markers
              if (markers[bus]) {
                markers[bus].setLatLng([lat, lon]);
              } else {
                markers[bus] = L.marker([lat, lon], { icon: createBusLabel(bus) })
                  .addTo(map)
                  .bindPopup(`Bus ${bus}`);
              }

              // Calculate ETA
              calculateETA(bus, lat, lon, studentLocation[0], studentLocation[1]);
            });
          });

        }, (error) => {
          console.error('Error getting location:', error);
          alert('Unable to retrieve your location. Please check your browser settings.');
        });
      } else {
        alert("Geolocation is not supported by this browser.");
      }
    }

    // Call the function to get user location
    getUserLocation();
  </script>
</body>
</html>
